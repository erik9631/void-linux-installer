#!/bin/bash

#TODO
# Add nvidia drivers script

# shellcheck source=network
source "$SCRIPT_DIR/includes/network"

# shellcheck source=utils
source "$SCRIPT_DIR/includes/utils"

# shellcheck source=copy
source "$SCRIPT_DIR/includes/copy"

# shellcheck source=package_installer
source "$SCRIPT_DIR/includes/package_installer"

# shellcheck source=bootloader
source "$SCRIPT_DIR/includes/bootloader"

# shellcheck source=display
source "$SCRIPT_DIR/includes/display"

# shellcheck source=service
source "$SCRIPT_DIR/includes/cservice"

stage_zero(){
  # Check if the script is running as root
  local is_wireless
  local connection_state
  check_root_user
  if ! connection_state=$(handle_internet_connection); then
    exit 1
  fi
  is_wireless=$(echo "$connection_state" | grep -i -c 'wireless')

  if ((is_wireless)); then
    echo "Wireless connection detected."
  else
    echo "Wired connection detected."
  fi

  if findmnt -M "/mnt" >/dev/null; then
    echo "/mnt is mounted. Installing kernel..."
  else
    echo "/mnt is not mounted."
    exit 1
  fi
  local scripts_path="${LIVE_PATH}/scripts/"

  # Install the tarbar
  if ! tar xvf "${LIVE_PATH}/system.tar" -C /mnt; then
    echo "Failed to extract system.tar." >&2
    exit 1
  fi

  echo "Generating file system table..."
  "$scripts_path/genfstab" -U /mnt >>/mnt/etc/fstab

  echo "Moving scripts..."
  cp -rv "$SCRIPT_DIR"/includes/* /mnt/opt/install/includes/
  cp -rv "$SCRIPT_DIR"/install /mnt/opt/install/.
  cp -rv "$SCRIPT_DIR"/scripts/* /bin/
  cp -rv "$SCRIPT_DIR"/includes/utils/* /usr/lib/psi/utils/
  sudo chmod -R 755 /mnt/opt/install/.
  sudo chmod -R 755 /bin/
  sudo chmod -R 755 /usr/lib/psi/utils/

  local hostname
  local username
  local password

  read -p 'Set your hostname: ' hostname
  read -p 'Set your username: ' username
  read -sp 'Set your root password: ' password
  echo ""

  export hostname
  export password
  export username

  local stage0_packages_str
  local boot_mode

  boot_mode=$(get_boot_mode)
  stage0_packages_str="$(export_package_group "stage0" "xbps")"

  export stage0_packages_str
  export boot_mode
  # Install chrony and start the serviceF
  # Setup a time zone
  # List of zones can be obtained from /usr/share/zoneinfo. This comes from tzdata package which should be pre-installed
  # then make a symlink to the zone you want to use to export TZ='America/New_York' set in ~/.profile or ~/.bashrc:
  # Setup dbus service
  # Setup tlp and start tlp service
  # install pipewire. After it is installed do:
  # mkdir -p /etc/pipewire/pipewire.conf.d
  #ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/
  # Also install rtkit as it is needed for pipewire for realtime scheduling
  # install seatd and set up the service
  # We also need to make sure we are in audio and video group
  # Set up XDG_RUNTIME_DIR. The variable should be exported in /run/user/$(id -u). Make sure this folder exists. It should be created on session start by the user
  # Install alsa-pipewire, then enable the PipeWire ALSA device and make it the default:
  # mkdir -p /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
  # insstall mesa-dri vulkan-loader (needed by wayfire)
  # install wayfire
  # Instal alacritty
  # Install nerd-fonts


  x_chroot /mnt /bin/bash -c "
    xbps-install -Suy xbps
    xbps-install -uy
    xbps-install -y base-system
    xbps-remove -y base-container-full
    if [[ -n \"\${stage0_packages_str}\" ]]; then
      readarray -t stage0_packages <<< \"\${stage0_packages_str}\"
      echo 'Installing basic packages' >&2
          if ! install_xbps_packages \"\${stage0_packages[@]}\"; then
              echo 'Failed to install xbps packages' >&2
              exit 1
          fi
    fi

    echo \"\$hostname\" > /etc/hostname
    echo \"root:\$password\" | chpasswd -c SHA512

    echo 'Setting up new user...'
    useradd -m \"\$username\"
    echo \"\$username:\$password\" | chpasswd -c SHA512
    usermod -aG wheel \"\$username\"
    usermod -aG audio \"\$username\"
    sed -i '/^#\s*%wheel ALL=(ALL:ALL) NOPASSWD: ALL/s/^# //' /etc/sudoers

    echo 'Preparing grub...'
    if ! install_grub \"\$boot_mode\"; then
        echo 'Grub installation failed' >&2
        exit 1
    fi

    if ! xbps-reconfigure -fa; then
        echo 'xbps-reconfigure failed' >&2
        exit 1
    fi

    echo 'Preparing for stage 1...'
    mkdir -p /var/install/
    touch /var/install/stage1
  "

  echo 'Stage 0 complete, rebooting into the system to run stage 1...'
  sleep 5
  shutdown -r now
}

stage_one(){

  if ! is_internet_connected; then
    if ! handle_internet_connection; then
      echo "Internet is not connected. Please connect to the internet and run this script again with --stage 1."
      exit 1
    fi
  fi

  sudo pacman -Syy
  # Install file manager
  local stage1_packages
  readarray -t stage1_packages <<< "$(export_package_group "stage1" "pacman")"

  if ! install_xbps_packages "${stage1_packages[@]}"; then
    echo "Failed to install pacman packages"
    exit 1
  fi

  echo "Installing additional model specific packages..."
  if ! install_model_packages; then
    echo "Failed to install model specific packages."
    if ! ask_for_confirmation "Manual installation required. Do you want to continue?"; then
      echo "Aborting installation."
      exit 1
    fi
  fi

  if ! install_yay_for_all; then
    echo "yay installation failed"
    exit 1
  fi

  echo "Updating stage file..."
  sudo mv /var/install/stage1 /var/install/stage2

  echo "All stage1 installations are complete."
  echo "Proceeding to stage2..."
  stage_two
}

# User specific services
stage_two(){



  local stage2_yay_packages
  readarray -t stage2_yay_packages <<< "$(export_package_group "stage2" "yay")"
  if ! install_yay_packages "${stage2_yay_packages[@]}"; then
    echo "installing yay packages failed" >&2
    exit 1
  fi

  if ! copy_bin; then
    echo "Copying scripts failed" >&2
    exit 1
  fi

  if ! copy_rofi_usr_theme; then
    echo "Copying rofi user theme failed" >&2
    exit 1
  fi

  if ! copy_dots; then
    echo "Copying modrpobe failed." >&2
    exit 1
  fi

  if ! apply_gtk_theme; then
    echo "Applying gtk theme failed." >&2
    exit 1
  fi

    # The resume hook is used for hibernation
  if ! add_initramfs_resume_hook; then
    echo "Failed to add resume hook to mkinitcpio.conf" >&2
    exit 1
  fi

  if ! add_mdns_to_nsswitch; then
    echo "Failed to add mdns to nsswitch.conf" >&2
    exit 1
  fi

  systemctl enable --user --now pipewire
  systemctl enable --user --now pipewire-pulse
  systemctl enable --user --now wireplumber
  systemctl enable --now bluetooth
  systemctl enable tlp
  systemctl enable --now avahi-daemon
  systemctl enable --now cups

  # Tells the kernel which swap partition is used for hibernation
  add_resume_device_to_kernel

  echo "Performing cleanup..."
  sudo rm -rf /opt/install
  sudo rm -rf /var/install
  exit 0
}