#!/bin/bash

#TODO
# Add nvidia drivers script

# shellcheck source=network
source "$SCRIPT_DIR/includes/network"

# shellcheck source=utils
source "$SCRIPT_DIR/includes/utils"

# shellcheck source=configs
source "$SCRIPT_DIR/includes/configs"

# shellcheck source=package_installer
source "$SCRIPT_DIR/includes/package_installer"

# shellcheck source=bootloader
source "$SCRIPT_DIR/includes/bootloader"

# shellcheck source=display
source "$SCRIPT_DIR/includes/display"

# shellcheck source=service
source "$SCRIPT_DIR/includes/service"

# shellcheck source=common
source "$SCRIPT_DIR/includes/common"

stage_zero(){
  # Check if the script is running as root
  local is_wireless
  local connection_state
  check_root_user
  if ! connection_state=$(handle_internet_connection); then
    exit 1
  fi
  is_wireless=$(echo "$connection_state" | grep -i -c 'wireless')

  if ((is_wireless)); then
    echo "Wireless connection detected."
  else
    echo "Wired connection detected."
  fi

  if findmnt -M "/mnt" >/dev/null; then
    echo "/mnt is mounted. Installing kernel..."
  else
    echo "/mnt is not mounted."
    exit 1
  fi
  local tar_path="$SCRIPT_DIR/../system.tar"

  # Install the tarbar
  if ! tar xvf "$tar_path" -C /mnt; then
    echo "Failed to extract system.tar." >&2
    exit 1
  fi

  echo "Generating file system table..."
  "$SCRIPT_DIR"/scripts/genfstab -U /mnt >>/mnt/etc/fstab
  copy_scripts /mnt/bin/ /mnt/usr/lib/

  echo "Copying services..."
  if ! cp -rfv "$SCRIPT_DIR"/sv/* /mnt/etc/sv/; then
    echo "Failed to copy services to /etc/sv/" >&2
    exit 1
  fi

  echo "Copying fonts..."
  mkdir -p /mnt/usr/share/fonts/
  if ! cp -rfv "$SCRIPT_DIR"/../fonts/* /mnt/usr/share/fonts/; then
    echo "Failed to copy fonts to /mnt/usr/share/fonts/" >&2
    exit 1
  fi

  local hostname
  local username
  local password

  read -p 'Set your hostname: ' hostname
  read -p 'Set your username: ' username
  read -sp 'Set your root password: ' password
  echo " " >&2

  export password
  export username

  local stage0_packages_str
  local boot_mode

  boot_mode=$(get_boot_mode)
  stage0_packages_str="$(export_package_group "stage0" "xbps")"

  export boot_mode
  # Install chrony and start the service
  # Setup a time zone
  # List of zones can be obtained from /usr/share/zoneinfo. This comes from tzdata package which should be pre-installed
  # then make a symlink to the zone you want to use to export TZ='America/New_York' set in ~/.profile or ~/.bashrc:
  # Setup dbus service
  # Setup tlp and start tlp service
  # install pipewire. After it is installed do:
  # mkdir -p /etc/pipewire/pipewire.conf.d
  #ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/
  # Also install rtkit as it is needed for pipewire for realtime scheduling
  # install seatd and set up the service
  # We also need to make sure we are in audio and video group
  # Set up XDG_RUNTIME_DIR. The variable should be exported in /run/user/$(id -u). Make sure this folder exists. It should be created on session start by the user
  # Install alsa-pipewire, then enable the PipeWire ALSA device and make it the default:
  # mkdir -p /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
  # install mesa-dri vulkan-loader (needed by wayfire)
  # install wayfire
  # Instal alacritty
  # Install nerd-fonts
  # Copy the wayfire ini
  # Set XDG_RUNTIME_DIR into the profile --- make a util function for this as this is common
  ## For apps
  # change exec line in /usr/share/applications/alacritty.desktop and btop and any other console app to launch as alacritty -e <command>
  # Install wl-clipboard
  # Install wdisplays --- Display manager
  # Install waybar
  # install git
  # install fuzzel
  # base-devel for gcc toolchain
  # install p7zip
  # install nnn
  # For nnn edit the desktop file so it launches in alacritty
  # /etc/udev/rules.d/90-backlight.rules --- for backlight. We need a rule so we can write to the backlight device
  # ACTION=="add", SUBSYSTEM=="backlight", GROUP="video", MODE="0664"
  # Copy nvim configs
  # Use BTRFS for testing
  ## TODO
  # Display manager not saving config
  # Consider installing swww for backgrounds. Consider using waypaper (IT is in python so maybe not)
  # Setup screen sharing
  # Setup screenshotting and screen capture
  # Setup printing
  # Setup nnn plugins
  # Setup jetbrains and other stuff

  copy_wpa_supplicant_conf
  xbps-install -Suy xbps
  xbps-install -y unzip

  # installs base-system and prepares grub
  x_chroot /mnt /bin/bash -c "
    if ! xbps-install -Suy xbps; then
        echo 'Failed to update xbps' >&2
        exit 1
    fi
    if ! xbps-install -uy; then
        echo 'Failed to update system' >&2
        exit 1
    fi
    if ! xbps-install -y base-system; then
        echo 'Failed to install base system' >&2
        exit 1
    fi
    if ! xbps-remove -y base-container-full; then
        echo 'Failed to remove base-container-full' >&2
        exit 1
    fi
    if ! xbps-install -y fontconfig; then
        echo 'Failed to install fontconfig' >&2
        exit 1
    fi

    echo 'Preparing grub...'
    if ! install_grub \"\$boot_mode\"; then
        echo 'Grub installation failed' >&2
        exit 1
    fi

    if ! xbps-reconfigure -fa; then
        echo 'xbps-reconfigure failed' >&2
        exit 1
    fi
  "

  # installs all the packages for the system
  echo 'Installing packages...'>&2
  if [[ -n "${stage0_packages_str}" ]]; then
    local stage0_packages
    local count=0
    readarray -t stage0_packages <<< "${stage0_packages_str}"
    echo 'Installing basic packages' >&2
    while ((count < 5)); do
    if ! install_xbps_packages stage0_packages /mnt; then
          echo 'Failed to install xbps packages...retrying' >&2
          ((count++))
          continue
      fi
      echo 'Successfully installed packages' >&2
      break
    done
  fi

  if ((count == 5)); then
    echo 'Failed to install packages. Check internet connection and try again.' >&2
    exit 1
  fi
  echo "Setting up hostname" >&2
  echo "$hostname" > /mnt/etc/hostname

  # Setups pipewire configuration so it properly works with pulse and alsa
  # Also setups up the initial user and his permissions
  # Lastly sets up basic services
  x_chroot /mnt /bin/bash -c "
    if ! mkdir -p /etc/pipewire/pipewire.conf.d; then
      echo \"Failed to create pipewire folder\" >&2
    fi

    if ! ln -sv /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/; then
      echo \"WirePlumber configuration failed to link\" >&2
    fi

    if ! ln -sv /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/; then
      echo \"Pipewire configuration failed to link\"
    fi

    if ! mkdir -p /etc/alsa/conf.d; then
      echo \"Failed to create alsa config directory\" >&2
    fi

    if ! ln -sv /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d/; then
      echo \"Failed to link ALSA pipewire config\" >&2
    fi

    if ! ln -sv /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d/; then
      ln -sv /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
    fi

    echo \"root:\$password\" | chpasswd -c SHA512
    echo 'Setting up new user...' >&2
    useradd -m \"\$username\"
    echo \"\$username:\$password\" | chpasswd -c SHA512
    usermod -aG wheel \"\$username\"
    usermod -aG audio \"\$username\"
    usermod -aG video \"\$username\"
    usermod -aG _seatd \"\$username\"
    sed -i '/^#\s*%wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers

    echo 'Performing services setup...'>&2
    for svc in dbus dhcpcd chronyd tlp rtkit seatd xdg-run-generator; do
        if ! service -c /etc/runit/runsvdir/default/ \$svc; then
            echo \"Warning: Failed to enable \$svc\" >&2
        fi
    done
  "

  copy_configs "/mnt/home/$username" "$username"

  # Setup XDG_RUNTIME_DIR

  if ! map_string  "export XDG_RUNTIME_DIR=" "export XDG_RUNTIME_DIR=/run/user/\$(id -u)" /mnt/etc/profile.d/bash.sh; then
    echo "Failed to map XDG_RUNTIME_DIR" >&2
  fi

  # Setups desktop files
  if ! map_string "Exec=nnn" "Exec=alacritty -e nnn" /mnt/usr/share/applications/nnn.desktop; then
    echo "Failed to map nnn" >&2
  fi

  if ! map_string "Exec=nvim %F" "Exec=alacritty -e nvim %F" /mnt/usr/share/applications/nvim.desktop; then
    echo "Failed to map nvim" >&2
  fi

  if ! map_string "Exec=btop" "Exec=alacritty -e btop" /mnt/usr/share/applications/btop.desktop; then
    echo "Failed to map btop" >&2
  fi

  if ! map_string "Terminal=true" "Terminal=false" /mnt/usr/share/applications/nnn.desktop; then
    echo "Failed to set Terminal=false for nnn" >&2
  fi

  if ! map_string "Terminal=true" "Terminal=false" /mnt/usr/share/applications/nvim.desktop; then
    echo "Failed to set terminal=false for nvim" >&2
  fi

  if ! map_string "Terminal=true" "Terminal=false" /mnt/usr/share/applications/btop.desktop; then
    echo "Failed to set Terminal=false for btop" >&2
  fi

  if ! mkdir -p /mnt/etc/udev/rules.d/ ; then
    echo "Failed to create udev rules directory" >&2
  fi

  if ! echo 'ACTION=="add", SUBSYSTEM=="backlight", GROUP="video", MODE="0664"' > /mnt/etc/udev/rules.d/backlight.rules; then
    echo "Failed to create udev rule" >&2
  fi

  if ! export_theme "Dracula" "/mnt/home/$username"; then
    echo "Failed to export theme" >&2
  fi

  echo 'Install complete. Rebooting into the system'
  sleep 5
  # shutdown -r now
}