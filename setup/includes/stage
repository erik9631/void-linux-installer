#!/bin/bash

#TODO
# Add nvidia drivers script

# shellcheck source=network
source "$SCRIPT_DIR/includes/network"

# shellcheck source=utils
source "$SCRIPT_DIR/includes/utils"

# shellcheck source=configs
source "$SCRIPT_DIR/includes/configs"

# shellcheck source=package_installer
source "$SCRIPT_DIR/includes/package_installer"

# shellcheck source=bootloader
source "$SCRIPT_DIR/includes/bootloader"

# shellcheck source=display
source "$SCRIPT_DIR/includes/display"

# shellcheck source=service
source "$SCRIPT_DIR/includes/service"

# shellcheck source=common
source "$SCRIPT_DIR/includes/common"

stage_zero(){
  # Check if the script is running as root
  local is_wireless
  local connection_state
  check_root_user
  if ! connection_state=$(handle_internet_connection); then
    exit 1
  fi
  is_wireless=$(echo "$connection_state" | grep -i -c 'wireless')

  if ((is_wireless)); then
    echo "Wireless connection detected."
  else
    echo "Wired connection detected."
  fi

  if findmnt -M "/mnt" >/dev/null; then
    echo "/mnt is mounted. Installing kernel..."
  else
    echo "/mnt is not mounted."
    exit 1
  fi
  local tar_path="$SCRIPT_DIR/../system.tar"

  # Install the tarbar
  if ! tar xvf "$tar_path" -C /mnt; then
    echo "Failed to extract system.tar." >&2
    exit 1
  fi

  echo "Generating file system table..."
  "$SCRIPT_DIR"/scripts/genfstab -U /mnt >>/mnt/etc/fstab
  copy_scripts /mnt/bin/ /mnt/usr/lib/

  echo "Copying services..."
  if ! cp -rfv "$SCRIPT_DIR"/sv/* /mnt/etc/sv/; then
    echo "Failed to copy services to /etc/sv/" >&2
    exit 1
  fi

  echo "Copying fonts..."
  mkdir -p /mnt/usr/share/fonts/
  if ! cp -rfv "$SCRIPT_DIR"/../fonts/* /mnt/usr/share/fonts/; then
    echo "Failed to copy fonts to /mnt/usr/share/fonts/" >&2
    exit 1
  fi

  local hostname
  local username
  local password

  read -p 'Set your hostname: ' hostname
  read -p 'Set your username: ' username
  read -sp 'Set your root password: ' password
  echo " " >&2

  export password
  export username

  local stage0_packages_str
  local boot_mode

  boot_mode=$(get_boot_mode)
  stage0_packages_str="$(export_package_group "stage0" "xbps")"

  export boot_mode
  # Install chrony and start the service
  # Setup a time zone
  # List of zones can be obtained from /usr/share/zoneinfo. This comes from tzdata package which should be pre-installed
  # then make a symlink to the zone you want to use to export TZ='America/New_York' set in ~/.profile or ~/.bashrc:
  # Setup dbus service
  # Setup tlp and start tlp service
  # install pipewire. After it is installed do:
  # mkdir -p /etc/pipewire/pipewire.conf.d
  #ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/
  # Also install rtkit as it is needed for pipewire for realtime scheduling
  # install seatd and set up the service
  # We also need to make sure we are in audio and video group
  # Set up XDG_RUNTIME_DIR. The variable should be exported in /run/user/$(id -u). Make sure this folder exists. It should be created on session start by the user
  # Install alsa-pipewire, then enable the PipeWire ALSA device and make it the default:
  # mkdir -p /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d
  # ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
  # install mesa-dri vulkan-loader (needed by wayfire)
  # install wayfire
  # Instal alacritty
  # Install nerd-fonts
  # Copy the wayfire inis
  # Set XDG_RUNTIME_DIR into the profile --- make a util function for this as this is common

  copy_wpa_supplicant_conf

  x_chroot /mnt /bin/bash -c "
    if ! xbps-install -Suy xbps; then
        echo 'Failed to update xbps' >&2
        exit 1
    fi
    if ! xbps-install -uy; then
        echo 'Failed to update system' >&2
        exit 1
    fi
    if ! xbps-install -y base-system; then
        echo 'Failed to install base system' >&2
        exit 1
    fi
    if ! xbps-remove -y base-container-full; then
        echo 'Failed to remove base-container-full' >&2
        exit 1
    fi
    if ! xbps-install -y fontconfig; then
        echo 'Failed to install fontconfig' >&2
        exit 1
    fi

    echo 'Preparing grub...'
    if ! install_grub \"\$boot_mode\"; then
        echo 'Grub installation failed' >&2
        exit 1
    fi

    if ! xbps-reconfigure -fa; then
        echo 'xbps-reconfigure failed' >&2
        exit 1
    fi
  "

  echo 'Installing packages...'>&2
  if [[ -n "${stage0_packages_str}" ]]; then
    local stage0_packages
    local count=0
    readarray -t stage0_packages <<< "${stage0_packages_str}"
    echo 'Installing basic packages' >&2
    while ((count < 5)); do
    if ! install_xbps_packages stage0_packages /mnt; then
          echo 'Failed to install xbps packages...retrying' >&2
          ((count++))
          continue
      fi
      echo 'Successfully installed packages' >&2
      break
    done
  fi

  if ((count == 5)); then
    echo 'Failed to install packages. Check internet connection and try again.' >&2
    exit 1
  fi

  if ! mkdir -p /mnt/etc/pipewire/pipewire.conf.d; then
    echo "Failed to create pipewire folder" >&2
  fi

  if ! ln -s /mnt/usr/share/examples/pipewire/20-pipewire-pulse.conf /mnt/etc/pipewire/pipewire.conf.d/; then
    echo "Pipewire configuration failed to link"
  fi

  mkdir -p /mnt/etc/alsa/conf.d
  ln -s /mnt/usr/share/alsa/alsa.conf.d/50-pipewire.conf /mnt/etc/alsa/conf.d
  ln -s /mnt/usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /mnt/etc/alsa/conf.d

  echo "Setting up hostname" >&2
  echo "$hostname" > /mnt/etc/hostname

  x_chroot /mnt /bin/bash -c "
    echo \"root:\$password\" | chpasswd -c SHA512

    echo 'Setting up new user...' >&2
    useradd -m \"\$username\"
    echo \"\$username:\$password\" | chpasswd -c SHA512
    usermod -aG wheel \"\$username\"
    usermod -aG audio \"\$username\"
    usermod -aG video \"\$username\"
    usermod -aG _seatd \"\$username\"
    sed -i '/^#\s*%wheel ALL=(ALL:ALL) NOPASSWD: ALL/s/^# //' /etc/sudoers

    echo 'Performing services setup...'>&2
    for svc in dbus dhcpcd chronyd tlp rtkit seatd xdg-run-generator; do
        if ! service -c /etc/runit/runsvdir/default/ \$svc; then
            echo \"Warning: Failed to enable \$svc\" >&2
        fi
    done
  "

  map_string  "export XDG_RUNTIME_DIR=" "export XDG_RUNTIME_DIR=/run/user/\$(id -u)" /mnt/etc/profile.d/bash.sh
  copy_wayfire_ini "/mnt/home/$username"

  echo 'Install complete. Rebooting into the system'
  sleep 5
  # shutdown -r now
}

stage_one(){
  if ! is_internet_connected; then
    if ! handle_internet_connection; then
      echo "Internet is not connected. Please connect to the internet and run this script again with --stage 1."
      exit 1
    fi
  fi

  sudo pacman -Syy
  # Install file manager
  local stage1_packages
  readarray -t stage1_packages <<< "$(export_package_group "stage1" "pacman")"

  if ! install_xbps_packages "${stage1_packages[@]}"; then
    echo "Failed to install xbps packages"
    exit 1
  fi

  echo "Installing additional model specific packages..."
  if ! install_model_packages; then
    echo "Failed to install model specific packages."
    if ! ask_for_confirmation "Manual installation required. Do you want to continue?"; then
      echo "Aborting installation."
      exit 1
    fi
  fi

  if ! install_yay_for_all; then
    echo "yay installation failed"
    exit 1
  fi

  echo "Updating stage file..."
  sudo mv /var/install/stage1 /var/install/stage2

  echo "All stage1 installations are complete."
  echo "Proceeding to stage2..."
  stage_two
}

# User specific services
stage_two(){



  local stage2_yay_packages
  readarray -t stage2_yay_packages <<< "$(export_package_group "stage2" "yay")"
  if ! install_yay_packages "${stage2_yay_packages[@]}"; then
    echo "installing yay packages failed" >&2
    exit 1
  fi

  if ! copy_bin; then
    echo "Copying scripts failed" >&2
    exit 1
  fi

  if ! copy_rofi_usr_theme; then
    echo "Copying rofi user theme failed" >&2
    exit 1
  fi

  if ! copy_dots; then
    echo "Copying modrpobe failed." >&2
    exit 1
  fi

  if ! apply_gtk_theme; then
    echo "Applying gtk theme failed." >&2
    exit 1
  fi

    # The resume hook is used for hibernation
  if ! add_initramfs_resume_hook; then
    echo "Failed to add resume hook to mkinitcpio.conf" >&2
    exit 1
  fi

  if ! add_mdns_to_nsswitch; then
    echo "Failed to add mdns to nsswitch.conf" >&2
    exit 1
  fi

  systemctl enable --user --now pipewire
  systemctl enable --user --now pipewire-pulse
  systemctl enable --user --now wireplumber
  systemctl enable --now bluetooth
  systemctl enable tlp
  systemctl enable --now avahi-daemon
  systemctl enable --now cups

  # Tells the kernel which swap partition is used for hibernation
  add_resume_device_to_kernel

  echo "Performing cleanup..."
  sudo rm -rf /opt/install
  sudo rm -rf /var/install
  exit 0
}